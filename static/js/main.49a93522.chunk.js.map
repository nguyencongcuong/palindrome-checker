{"version":3,"sources":["components/Checker.jsx","functions/checkPalindrome.js","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","root","fontFamily","fontSize","name","fontWeight","textareaWrapper","overflow","textarea","backgroundColor","border","width","outline","checkIcon","textAlign","margin","spacing","Checker","classes","useState","typedText","setTypedText","isPalindrome","setIsPalindrome","useEffect","str","arrayA","arrayB","string","slice","regex","RegExp","set1","replace","toLowerCase","split","set2","reverse","Array","isArray","length","every","val","index","checkPalindrome","Fragment","Container","maxWidth","className","Grid","container","justifyContent","alignItems","main","item","xs","Card","CardHeader","title","CardContent","desc","children","TextareaAutosize","minRows","value","onChange","e","target","placeholder","CheckCircleTwoTone","color","HighlightOffTwoTone","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","primary","light","teal","dark","myButton","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49a93522.chunk.js","sourcesContent":["import { Card, CardContent, CardHeader, Container, Grid, makeStyles, TextareaAutosize } from '@material-ui/core';\r\nimport { CheckCircleTwoTone, HighlightOffTwoTone } from '@material-ui/icons';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { checkPalindrome } from '../functions/checkPalindrome';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    fontSize: \"20px\",\r\n  },\r\n  name: {\r\n    fontWeight: 600,\r\n  },\r\n  textareaWrapper: {\r\n    overflow: \"hidden\",\r\n  },\r\n  textarea: {\r\n    backgroundColor: \"transparent\",\r\n    border: \"none\",\r\n    width: \"100%\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    }\r\n  },\r\n  checkIcon: {\r\n    textAlign: \"right\",\r\n    margin: theme.spacing(4)\r\n  }\r\n}))\r\n\r\nfunction Checker() {\r\n  \r\n  const classes = useStyles()\r\n  const [typedText, setTypedText] = useState(\"\")\r\n  const [isPalindrome, setIsPalindrome] = useState(false)\r\n\r\n  useEffect(() => {\r\n    return checkPalindrome(typedText) ? setIsPalindrome(true) : setIsPalindrome(false)\r\n  }, [typedText])\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <Container maxWidth=\"sm\" className={classes.root}>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          className={classes.main}\r\n        >\r\n\r\n          <Grid\r\n            item\r\n            xs={12}\r\n          >\r\n            <Card>\r\n              <CardHeader\r\n                className={classes.name}\r\n                title=\"Palindrome Checker\"\r\n              />\r\n              <CardContent\r\n                className={classes.desc}\r\n                children=\"A palindrome is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing. You should see whether a text is a Palindrome or not as the icon changes.\"\r\n              />\r\n            </Card>         \r\n          </Grid>\r\n\r\n          <Grid \r\n            item\r\n            xs={12}\r\n            className={classes.textareaWrapper}\r\n          >\r\n            <Card>\r\n              <CardContent>\r\n                <TextareaAutosize\r\n                  className={classes.textarea}\r\n                  minRows=\"10\"\r\n                  value={typedText} \r\n                  onChange={(e) => setTypedText(e.target.value)}\r\n                  placeholder=\"Enter your text here to check\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item \r\n            xs={12}\r\n            className={classes.checkIcon}\r\n            children={\r\n              isPalindrome ? \r\n              <CheckCircleTwoTone color=\"primary\" fontSize=\"large\" /> : \r\n              <HighlightOffTwoTone color=\"secondary\" fontSize=\"large\" />\r\n            }\r\n          />\r\n\r\n        </Grid>\r\n      </Container>\r\n      \r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Checker","/**\r\n * PALINDROME CHECKER\r\n * Check whether or not the string is a Palindrome\r\n * A palindrome is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.\r\n * @param {String} str The string to check\r\n * @return {Boolean}\r\n * @example\r\n * checkPalindrome(\"A man, a plan, a canal. Panama\") should return true\r\n * checkPalindrome(\"My age is 0, 0 si ega ym.\") should return true\r\n * checkPalindrome(\"five|\\_/|four\") should return false\r\n * checkPalindrome(\"0_0 (: /-\\ :) 0-0\") should return true\r\n */\r\n\r\nexport function checkPalindrome(str) {\r\n\r\n  let string = str.slice();\r\n  let regex = new RegExp(/\\W|_/, \"g\");\r\n  let set1 = string.replace(regex, \"\").toLowerCase().split(\"\");\r\n  let set2 = set1.slice().reverse();\r\n\r\n  function isEqual(arrayA, arrayB) {\r\n    return Array.isArray(arrayA) &&\r\n      Array.isArray(arrayB) &&\r\n      arrayA.length === arrayB.length &&\r\n      arrayA.every((val, index) => val === arrayB[index]);\r\n  }\r\n\r\n  // console.log(set1);\r\n  // console.log(set2);\r\n  // console.log(isEqual(set1, set2));\r\n\r\n  return isEqual(set1, set2);\r\n}","import React from 'react';\r\nimport Checker from './components/Checker';\r\n\r\nfunction App() {\r\n  return (\r\n\t\t<Checker />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createTheme } from '@material-ui/core/styles';\r\nimport teal from '@material-ui/core/colors/teal';\r\n\r\nlet theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      light: teal[100],\r\n      main: teal[500],\r\n      dark: teal[700]\r\n    }\r\n  },\r\n  myButton: {\r\n    backgroundColor: \"black\",\r\n    color: \"white\"\r\n  }\r\n})\r\n\r\nexport { theme }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { theme } from \"./theme\"\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<App />\r\n\t\t</ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}